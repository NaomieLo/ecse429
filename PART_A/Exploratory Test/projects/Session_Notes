CHARTER -----------------------------------
Identify capabilities and areas of potential instability of the “rest api todo list manager”.
Identify documented and undocumented “rest api todo list manager” capabilities.
For each capability create a script or small program to demonstrate the capability.
Exercise each capability identified with data typical to the intended use of the application.

TIME ------------------------------------------
MM/DD/YY - HH:MM

ENV -------------------------------------------
Windows 10
Screen resolution: 1920x1080

DESCRIPTION  ----------------------------------
runTodoManagerRestAPI-1.5.5.jar

TESTER ----------------------------------------
Deniz Emre
deniz.emre@mail.mcgill.ca
261029931

Naomie Lo
naomie.lo@mail.mcgill.ca
261018690


TEST NOTES -------------------------------------

1- Testing /projects capabilities

MM/DD/YY - 15:50
1.01 GET /projects, output the in the projects list
1.02 HEAD /projects, nothing is returned in body
1.03 POST /projects, allows to create a project without ID. Automatically generates the next available ID number (2 in this case)

2- Testing /projects/:id capabilities

MM/DD/YY - 15:55

1.04 GET /projects/1, outputs entry 1 in projects list
1.05 GET /projects/2, outputs entry 2 in projects list
1.06 GET /projects/3, outputs error (404 Not found) as expected

1.07 HEAD /projects/1, returns empty body, no error
1.08 HEAD /projects/3, returns empty body, no error handling (404 not found)

1.09 POST /projects/3, returns error message as expected

1.10 POST /projects/2, returns project 2 unchanged
1.11 POST /projects/2 with body:{"title": "project 2"}
returns project 2 with changed title
1.12 POST /projects/2 with body:{"id": "2"}, 
returns {"errorMessages": ["Failed Validation: id should be ID"]}
1.13 POST /projects/2 with input: {"title": "project 2",  "completed": true}
returns {
    "id": "2",
    "title": "project 2",
    "completed": "true",
    "active": "false",
    "description": ""
}, as expected

1.14 PUT /projects/1 with input: {"title": "project 1"}
returns {
    "id": "1",
    "title": "project 1",
    "completed": "false",
    "active": "false",
    "description": ""
} as expected

1.14 DELETE /projects/3 empty body output as expected
1.15 DELETE /projects/2, empty body output, 202 OK

3- Testing /projects/:id/categories capabilities. 

MM/DD/YY - 16:14

Post a category with body: {
    "categories": [
        {
            "title": ", quis nostrud exerc",
            "description": "si ut aliquip ex eaa"
        }
    ]
} onto project 2.  ID nb 4 generated, why not 1?

1.16 GET /projects/1/categories, gets the categories of project 1
1.17 GET /projects/2/categories, gets the categories of project 1. However, project 2 does not exist => BUG

1.18 GET /projects/anything/categories, gets the categories of project 1. However none of these projects exist. BUG
1.19 HEAD /projects/1/categories, gets the categories of project 1, returns empty 
1.20 POST /projects/1/categories with body:
{
  "title": "sed do eiusmod tempo"
} 
Category created with next available ID count in project with ID 1

1.21 POST /projects/2/categories with same body, Error message shown, no parent thing found, as expected

4- Testing /projects/:id/tasks capabilities. 

MM/DD/YY - 16:28

1.22 POST /projects/1/tasks, with input body (without input body: title field mandatory message):
 { "title": "sed do eiusmod tempo"}, outputs {
    "id": "8",
    "title": "sed do eiusmod tempo",
    "doneStatus": "false",
    "description": "",
    "tasksof": [
        {
            "id": "1"
        }
    ]
}

1.23 GET /projects/1/tasks, outputs project tasks with ID number 8, as expected
1.24 HEAD /projects/1/tasks, 200 OK returns empty body 


5- Testing /projects/:id/tasks/:id capabilities. 

MM/DD/YY - 16:32

1.25 DELETE /projects/1/tasks/8, deletes the task 8 from projects
1.26 DELETE /projects/5/tasks/8, returns no instance error message