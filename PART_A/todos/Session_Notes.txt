CHARTER -----------------------------------
Identify capabilities and areas of potential instability of the “rest api todo list manager”.
Identify documented and undocumented “rest api todo list manager” capabilities.
For each capability create a script or small program to demonstrate the capability.
Exercise each capability identified with data typical to the intended use of the application.

TIME ------------------------------------------
10/01/24 - HH:MM

ENV -------------------------------------------
macOS

DESCRIPTION  ----------------------------------
runTodoManagerRestAPI-1.5.5.jar

TESTER ----------------------------------------
Naomie Lo
naomie.lo@mail.mcgill.ca
261018690

LEGEND ----------------------------------------
E - Expected == Observed
N - Expected != Observed
U - Undocumented 

TEST NOTES ------------------------------------

10/01/24 - 14:00
start with testing endpoints in documentation 
E | 1.00 GET /todos, returned the contents of todos
N | 1.01 HEAD /todos, nothing returned but not errors
E | 1.02 POST /todos with JSON input below, appended a new item with id 3 to todos
{
  "title": "cing elit, sed do ei",
  "description": "nulla pariatur. Exce"
}

10/01/24 - 14:04
E | 1.03 GET /todos/:id with param 1, returned the contents of todos
N | 1.04 HEAD /todos/:id with param 1, nothing returned but not errors
E | 1.05 POST /todos/:id with param 1 with JSON input below, updates instance to todo with id 1 with the new values below (Screenshot/1.05.png)
{
  "title": "cing elit, sed do ei",
  "description": "nulla pariatur. Exce"
}

10/01/24 - 14:05
E | 1.06 PUT /todos/:id with param 1 with JSON input below, updates instance to todo with id 1 with the new values below
{
  "title": "cing elit, sed do ei",
  "description": "nulla pariatur. Exce"
}
E | 1.07 DELETE /todos/:id with param 2, deletes instance of todo with id 1

10/01/24 - 14:12
E | 1.08 GET /todos/:id/categories with param 1, returns the elements in categories in the todos instance with id 1 (Screenshots/1.08.png)
N | 1.09 HEAD /todos/:id/categories with param 1, returns nothing with 200 OK
E | 1.10 POST /todos/:id/categories with param 1 and JSON input below, adds id 3 to categories table, not sure why the deafult value is 3 if currently only instance with id 1 in categories (Screenshots/1.10)
{
  "title": "hello"
}

10/01/24 - 14:16
E | 1.11 DELETE /todos/1/categories/3, deleted category id 3

10/01/24 - 14:12
E | 1.12 GET /todos/:id/tasksof with param 1, returns the elements in categories in the todos instance with id 1 
N | 1.13 HEAD /todos/:id/tasksof with param 1, returns nothing with 200 OK
E | 1.14 POST /todos/:id/tasksof with param 1 and JSON input below, adds id 2 to tasksof table 
{
  "title": "hello"
}

10/01/24 - 14:20
E | 1.15 DELETE /todos/1/tasksof/2, deleted category id 2

10/01/24 - 14:22
begin testing undocumented capabilties 
U | 1.16 DELETE /todos, error 405 method not allowed (Screenshots/1.16.png)
U | 1.17 PUT /todos, error 405 method not allowed 
U | 1.18 PATCH /todos, error 405 method not allowed 
U | 1.19 OPTIONS /todos, 200 ok with no body returned (Screenshots/1.19.png)

10/01/24 - 14:25
U | 1.17 PATCH /todos/1, error 405 method not allowed 
U | 1.18 OPTIONS /todos/1, 200 ok with no body returned 

10/01/24 - 14:28
U | 1.20 PUT /todos/1/categories, error 405 method not allowed 
U | 1.21 PATCH /todos/1/categories, error 405 method not allowed 
U | 1.22 OPTIONS /todos/1/categories, 200 ok with no body returned 
U | 1.23 PATCH /todos/1/categories, error 405 method not allowed 


10/01/24 - 14:30
begin testing with data that would be used, restarted api
E | 1.24 POST /todos/1/catagories with JSON input below, want to test how deafult numbering of id work this assigned id 3 to new instance (Screenshot/1.22)
{
  "title": "hello"
}

E | 1.25 POST /todos/1/tasksof, want to test how deafult numbering of id work this assigned id 2 to new instance
{
  "title": "hello"
}

E | 1.26 POST /todos/1/tasksof, want to test how deafult numbering of id work this assigned id 3 to new instance
{
  "title": "hello"
}

E | 1.27 POST /todos/1/catagories with JSON input below, want to test how deafult numbering of id work this assigned id 4 to new instance (Screenshot/1.25)
{
  "title": "hello"
}

10/01/24 - 14:36
E | 1.28 GET /todos/10000, error 404 not found as expected "Could not find any instances with todos/10000" (Screenshot/1.26.png)
E | 1.29 HEAD /todos/10000, error 404 not found as expected "Could not find any instances with todos/10000"
E | 1.30 DELETE /todos/10000, error 404 not found as expected "Could not find any instances with todos/10000"


10/01/24 - 14:37
N | 1.31 POST /todos/1/categories with XML input below, 400 bad request error indicating id is invalid (Screenshot/1.29)
<todos>
  <id>10</id>
</todos>

N | 1.32 GET /todos/1/categories with XML input below, 400 bad request error indicating id is invalid 
<todos>
  <id>"10"</id>
</todos>

N | 1.33 GET /todos/1 with JSON input below,  400 bad request error indicating id is invalid 
{
    "id": "1"
}

10/01/24 - 14:40
E | 1.34 POST /todos with JSON input below, 400 bad request wanted to see what happens with invalid parameter
{
  "title": "cing elit, sed do ei",
  "description": "nulla pariatur. Exce",
  "hi": "bye"
}

10/01/24 - 14:42
U | 1.35 OPTIONS /todos with XML input below, 400 bad request wanted to see what happens with invalid parameter
<todo>
  <doneStatus>true</doneStatus>
  <description>iusmod tempor incidi</description>
  <id>64</id>
  <HI>ididunt ut labore et</HI>
</todo>

E | 1.36 DELETE /todos with JSON input below, 405 Method Not Allowed wanted to see what happens with invalid parameter
{
  "title": "cing elit, sed do ei",
  "description": "nulla pariatur. Exce",
  "hi": "bye"
}

10/01/24 - 14:42
E | 1.37 POST /todos with XML input below, created successfully with id 3
<todo>
  <title>hello world</title>
</todo>"bye"


E | 1.38 POST /todos/1/categories with XML input below, created successfully with id 5
<todo>
  <title>hello world</title>
</todo>

U | 1.39 DELETE /todos/1/categories with XML input below, 405 Method not allowed as expected
<todo>
  <title>hello world</title>
</todo>


END --------------------------------------------

SESSION FINDINGS -------------------------------
- When an ID id not specified, categories start at last id + 2 as deafult and increase by 1 but tasksof begin at last id + 1
- Could not enter an ID value using XML or JSON with POST, would get a error indicating the syntax is invalid
- Not sure what HEAD is supposed to return since nothing was ever returned while using this and no errors were ever thrown 

CONCERNS ---------------------------------------
- There are many undocumented capabilities, and most undocumented returned errors 
- The default numbering for IDs is a bit confusing to follow 
- In the doucmentation, the type for id is "ID" which is not a valid type to input in a JSON or XML
- In screenshot 1.25 the ordering of the categories id are in no logical order, not even the order they've been appended 

TEST IDEAS -------------------------------------
- Learn more about how todos affects its relationships like project and catagories
- Continue testing the different kinds of inputs in the JSON and XML format that is valid
- Test the upper bound length for inputs into when using POST

BUG SUMMARY 1 ------------------------------------

ID generation for categories and tasks is inconsistent, causing confusion.

Description of Bug: When a new category is created without specifying an ID, the generated ID starts at last ID + 2 and increments by 1. However, for tasks, the ID starts at last ID + 1. This inconsistency in ID generation creates confusion, especially when managing different resources in the system.

Potential Impact of Bug on Operation of System: The inconsistent ID generation may lead to confusion during data management and retrieval, particularly in systems that rely on sequential ordering of resource IDs. It could also result in unexpected behavior if external systems or users are assuming IDs follow the same generation logic across resources.

Steps to Reproduce the Bug:
1. Create a new category without specifying an ID.
2. Create a new task without specifying an ID.
3. Observe that the category ID is generated as last ID + 2, while the task ID is generated as last ID + 1.

BUG SUMMARY 2 ------------------------------------

Specifying an ID in JSON or XML with POST results in an invalid syntax error.

Description of Bug: When attempting to specify an ID in either JSON or XML format during a POST request, an error is returned indicating that the syntax is invalid. This prevents the ability to manually set IDs when creating new resources, restricting control over resource identifiers.

Potential Impact of Bug on Operation of System: This bug limits users’ ability to define custom IDs, which can be crucial for integration with other systems or for maintaining consistency across datasets. The inability to set specific IDs could also complicate data migration tasks and synchronization processes.

Steps to Reproduce the Bug:
1. Send a POST request to create a new resource (category or task), specifying an ID in the JSON or XML body.
2. Observe the error indicating the syntax is invalid.

BUG SUMMARY 3 ------------------------------------

Executive Summary: HEAD requests provide no response content or errors, creating ambiguity.

Description of Bug: When performing HEAD requests on resources, no data is returned and no errors are provided. This behavior is unclear since a typical HEAD request should return headers, indicating resource metadata without the body. The lack of any response or error makes it challenging to determine whether the request was processed correctly or if there was an issue.

Potential Impact of Bug on Operation of System: The ambiguous response to HEAD requests may lead to issues in system monitoring or health checks, where HEAD requests are often used to verify resource availability. Users or developers attempting to use HEAD for metadata may be left uncertain about the state of the requested resource, which could undermine reliability in automated processes.

Steps to Reproduce the Bug:
1. Send a HEAD request to any endpoint, such as /todos.
2. Observe that no data or errors are returned, making it unclear if the request succeeded.